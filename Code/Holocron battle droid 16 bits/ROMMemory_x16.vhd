library ieee;
use ieee.std_logic_1164.all;
use IEEE.Numeric_Std.all;

entity ROMMemory_x16 is
	port(
	address : in  std_logic_vector(15 downto 0);
	data: out std_logic_vector(15 downto 0));
end ROMMemory_x16;

architecture skeleton of ROMMemory_x16 is

	--type rom_array is array (0 to 65535) of std_logic_vector (15 downto 0);
	type rom_array is array (0 to 24) of std_logic_vector (15 downto 0);
	
	constant rom : rom_array := (
 
  -- Write your algorithm here
  -- :)
	
  -- Início algoritmo que calcula os 20 primeiros números da sequência de Fibonacci
  --0000000000000000 ,  0000000000000001 ,  0000000000000010 ,  0000000000000011 ,  0000000000000100
	--"1101001000000001", "1101001010001001", "1101001111111001", "0000101110101000", "1101010000010001", -- 00000 - 00004
	
  --0000000000000101 ,  0000000000000110 ,  0000000000000111 ,  0000000000001000 ,  0000000000001001
	--"0101101110000000", "1010000000001111", "1101001100100000", "0100001110101000", "1010000000001100", -- 00005 - 00009
 
  --0000000000001010 ,  0000000000001011 ,  0000000000001100 ,  0000000000001101 ,  0000000000001110
	--"1101001100101000", "0100001110001001", "1010000000001001", "1101011000100000", "0000011000101000", -- 00010 - 00014
	
  --0000000000001111 ,  0000000000010000 ,  0000000000010001 ,  0000000000010010 ,  0000000000010011
	--"1101001101100000", "1101001000101000", "1101001010110000", "0000110000001000", "0101110000111000", -- 00015 - 00019
  -- Fim algoritmo que calcula os 20 primeiros números da sequência de Fibonacci
  --0000000000010100 ,  0000000000010101 ,  0000000000010110 ,  0000000000010111 ,  0000000000011000
	--"1010011111111001", "0000000000000000", "0000000000000000", "0000000000000000", "0000000000000000", -- 00020 - 00024
  
  
  
  -- Início algoritmo que calcula os números primos entre 10 e 100
  --0000000000011001 ,  0000000000011010 ,  0000000000011011 ,  0000000000011100 ,  0000000000011101
	"1101001001010001", "1101011001100001", "1101010011101001", "0000010011100000", "0000010011001000", -- 00025 - 00029 
	
  --0000000000011110 ,  0000000000011111 ,  0000000000100000 ,  0000000000100001 ,  0000000000100010
	"0000010011001000", "1101001010100000", "1101001110101000", "1101010000010001", "0111101111000000", -- 00030 - 00034 
 																										
  --0000000000100011 ,  0000000000100100 ,  0000000000100101 ,  0000000000100110 ,  0000000000100111
	"1101001100010000", "0100010000110000", "1010000000000110", "0111101111000000", "0100000010000000", -- 00035 - 00039
	
  --0000000000101000 ,  0000000000101001 ,  0000000000101010 ,  0000000000101011 ,  0000000000101100
	"1010000000000100", "0000110000001000", "1000111111111010", "1101010110111000", "0000101010001000", -- 00040 - 00044 
  -- Fim algoritmo que calcula os números primos entre 10 e 100
  --0000000000101101 ,  0000000000101110 ,  0000000000101111 ,  0000000000110000 ,  0000000000110001
	"0100001011001000", "1010111111110010", "0000000000000000", "0000000000000000", "0000000000000000" -- 00045 - 00049
  
  
  
  -- Início algoritmo que ordena um vetor de 5 posições usando o Bubble Sort
  --0000000000110010 ,  0000000000110011 ,  0000000000110100 ,  0000000000110101 ,  0000000000110110
	--"1000100000010001", "1101011010000001", "0100011010101000", "1010000000100000", "1101011110100000", -- 00050 - 00054

  --0000000000110111 ,  0000000000111000 ,  0000000000111001 ,  0000000000111010 ,  0000000000111011
	--"0000011111101000", "1011010111111000", "0000111010001000", "1000111111111010", "1101011010000001", -- 00055 - 00059 
	
  --0000000000111100 ,  0000000000111101 ,  0000000000111110 ,  0000000000111111 ,  0000000001000000
	--"0100011010101000", "1010000000101110", "1101011110100000", "0000011111101000", "1011010111111000", -- 00060 - 00064 
	
  --0000000001000001 ,  0000000001000010 ,  0000000001000011 ,  0000000001000100 ,  0000000001000101
	--"0000111010001000", "1000111111111010", "1101001000000001", "1101001010101001", "1101011000100000", -- 00065 - 00069

  --0000000001000110 ,  0000000001000111 ,  0000000001001000 ,  0000000001001001 ,  0000000001001010
	--"1101011010101001", "1100011011100000", "0000111000001000", "1101011010011001", "1100011011100000", -- 00070 - 00074
	
  --0000000001001011 ,  0000000001001100 ,  0000000001001101 ,  0000000001001110 ,  0000000001001111
	--"0000111000001000", "1101011011001001", "1100011011100000", "0000111000001000", "1101011010111001", -- 00075 - 00079 
	
  --0000000001010000 ,  0000000001010001 ,  0000000001010010 ,  0000000001010011 ,  0000000001010100
	--"1100011011100000", "0000111000001000", "1101011010001001", "1100011011100000", "1000111111011111", -- 00080 - 00084 
	
  --0000000001010101 ,  0000000001010110 ,  0000000001010111 ,  0000000001011000 ,  0000000001011001
	--"1101011000000001", "1101011010101000", "0000111010001001", "1101011100000001", "1101011111101000", -- 00085 - 00089
	
  --0000000001011010 ,  0000000001011011 ,  0000000001011100 ,  0000000001011101 ,  0000000001011110
	--"0000011111100001", "1101001100100000", "0000001101110000", "1011010110110000", "0000101100001000", -- 00090 - 00094 
	
  --0000000001011111 ,  0000000001100000 ,  0000000001100001 ,  0000000001100010 ,  0000000001100011
	--"1011010100110000", "0101010101011000", "1010100000000100", "1100010110110000", "0000101100001001", -- 00095 - 00099
	
  --0000000001100100    0000000001100101    0000000001100110    0000000001100111    0000000001101000  
	--"1100010100110000", "0000111100001000", "0101011101111000", "1010011111110100", "0000111000001000", -- 00100 - 00104
  -- Fim algoritmo que ordena um vetor de 5 posições usando o Bubble Sort
  --0000000001101001    0000000001101010    0000000001101011    0000000001101100    0000000001101101
	--"0101011001101000", "1010011111101110", "1000111111010000", "0000000000000000", "0000000000000000", -- 00105 - 00109

	);
	
begin
	
	data <= rom(to_integer(unsigned(address)));

end architecture;
	